---

- name: Verify
  hosts: all
  vars:
    ca_ca_dir: /opt/ca
    ca_client_ca_dir: /opt/ca
  tasks:

    - name: Verify signature on certificate
      command: >
        openssl verify
        -verbose
        -CAfile {{ ca_ca_dir }}/ca.crt
        {{ ca_client_ca_dir }}/{{ inventory_hostname }}.crt

    - name: Verify signature on server certificate
      command: >
        openssl verify
        -verbose
        -CAfile {{ ca_ca_dir }}/ca.crt
        {{ ca_client_ca_dir }}/{{ inventory_hostname }}-server.crt

    - name: Check if instance key is present
      stat:
        path: "{{ ca_client_ca_dir }}/{{ inventory_hostname }}.key"
      register: instance_key_stat

    - name: Fail if instance key is missing
      fail:
        msg: "Instance key is missing"
      when:
        - not instance_key_stat.stat.exists | bool

    - name: Check if Logstash key is present
      stat:
        path: "{{ ca_client_ca_dir }}/{{ inventory_hostname }}-pkcs8.key"
      register: logstash_key_stat

    - name: Fail if Logstash key is missing
      fail:
        msg: "Logstash key is missing"
      when:
        - not logstash_key_stat.stat.exists | bool

    - name: Verify signature on etcd peer certificate
      command: >
        openssl verify
        -verbose
        -CAfile {{ ca_ca_dir }}/ca.crt
        {{ ca_client_ca_dir }}/{{ inventory_hostname }}-etcd.crt

    - name: Verify signature on etcd server certificate
      command: >
        openssl verify
        -verbose
        -CAfile {{ ca_ca_dir }}/ca.crt
        {{ ca_client_ca_dir }}/{{ inventory_hostname }}-etcd-server.crt

    - name: Verify signature on etcd server certificate
      command: >
        openssl verify
        -verbose
        -CAfile {{ ca_ca_dir }}/ca.crt
        {{ ca_client_ca_dir }}/{{ inventory_hostname }}-etcd-server.crt

    - name: Register SAN of etcd peer certificate
      command: >
        openssl x509
        -text
        -noout
        -in {{ ca_client_ca_dir }}/{{ inventory_hostname }}-etcd.crt
        -certopt "
        no_subject,
        no_header,
        no_version,
        no_serial,
        no_signame,
        no_validity,
        no_issuer,
        no_pubkey,
        no_sigdump,
        no_aux"
      register: etcd_san_peer_stat

    - name: Register SAN of etcd server certificate
      command: >
        openssl x509
        -text
        -noout
        -in {{ ca_client_ca_dir }}/{{ inventory_hostname }}-etcd-server.crt
        -certopt "
        no_subject,
        no_header,
        no_version,
        no_serial,
        no_signame,
        no_validity,
        no_issuer,
        no_pubkey,
        no_sigdump,
        no_aux"

      register: etcd_san_server_stat

    - name: Fail if SAN of etcd peer certificate is missing IP addresses
      fail:
        msg: "Default IPv4 address in etcd peer certifcate are missing"
      when:
        - hostvars['ca_default_client']['ansible_default_ipv4']['address']
          not in etcd_san_peer_stat.stdout
        - '"127.0.0.1" not in etcd_san_peer_stat.stdout'

    - name: Fail if SAN of etcd server certificate is missing IP addresses
      fail:
        msg: "Default IPv4 address in etcd server certifcate are missing"
      when:
        - hostvars['ca_default_client']['ansible_default_ipv4']['address']
          not in etcd_san_server_stat.stdout
        - '"127.0.0.1" not in etcd_san_server_stat.stdout'

    - name: Get next year
      set_fact:
        next_year: "{{ ( ansible_date_time.date.split('-')[0] | int ) +1 }}"

    - name: Register notAfter of client certificate
      shell: >
        set -o pipefail &&
        openssl x509
        -noout
        -dates
        -in {{ ca_client_ca_dir }}/{{ inventory_hostname }}.crt
        | grep notAfter
      register: client_crt_stat

    - name: Fail if notAfter of client certificate is not next year
      fail:
        msg: "Failed: notAfter of client certificate is not next year"
      when: next_year | string not in client_crt_stat.stdout

    - name: Register notAfter of server certificate
      shell: >
        set -o pipefail &&
        openssl x509
        -noout
        -dates
        -in {{ ca_client_ca_dir }}/{{ inventory_hostname }}-server.crt
        | grep notAfter
      register: server_crt_stat

    - name: Fail if notAfter of server certificate is not next year
      fail:
        msg: "Failed: notAfter of server certificate is not next year"
      when: next_year | string not in server_crt_stat.stdout

    - name: Register notAfter of etcd certificate
      shell: >
        set -o pipefail &&
        openssl x509
        -noout
        -dates
        -in {{ ca_client_ca_dir }}/{{ inventory_hostname }}-etcd.crt
        | grep notAfter
      register: etcd_crt_stat

    - name: Fail if notAfter of etcd certificate is not next year
      fail:
        msg: "Failed: notAfter of etcd certificate is not next year"
      when: next_year | string not in etcd_crt_stat.stdout

    - name: Register notAfter of etcd server certificate
      shell: >
        set -o pipefail &&
        openssl x509
        -noout
        -dates
        -in {{ ca_client_ca_dir }}/{{ inventory_hostname }}-etcd-server.crt
        | grep notAfter
      register: etcd_server_crt_stat

    - name: Fail if notAfter of etcd server certificate is not next year
      fail:
        msg: "Failed: notAfter of etcd server certificate is not next year"
      when: next_year | string not in etcd_server_crt_stat.stdout

    - name: Get year of next decade to check CA
      set_fact:
        next_decade: "{{ ( ansible_date_time.date.split('-')[0] | int ) +10 }}"

    - name: Register notAfter of CA certificate
      shell: >
        set -o pipefail &&
        openssl x509
        -noout
        -dates
        -in {{ ca_client_ca_dir }}/ca.crt
        | grep notAfter
      register: ca_crt_stat

    # Caution:
    # Can fail at end or beginning of year, since
    # leap year days can be +- 3
    - name: Fail if notAfter of CA certificate is not next decade
      fail:
        msg: "Failed: notAfter of CA certificate is not next decade"
      when: next_decade | string not in ca_crt_stat.stdout
